
/**
 * Time Complexity O ((n^2)(m^2)) using  Bellman-Ford algorithm for finding shortest path
 In contrary to Edmonds-Karp we look for the shortest path in terms of the cost of the path, instead of the number of edges.
 */
public class MinimumCostFlow {

    int n;
    ArrayDeque<Integer>[] adj;
    int[][] cost, capacity;
    int[] dis, parent;

    public MinimumCostFlow(int n) {
        this.n = n;
        adj = new ArrayDeque[n];
        Arrays.setAll(adj, o -> new ArrayDeque<>());
        cost = new int[n][n];
        capacity = new int[n][n];
        dis = new int[n];
        parent = new int[n];
    }

    int minCostFlow(int k, int source, int target) {

        int flow = 0, cost = 0;
        while (flow < k) {
            // Reset the distance and parent array
            Arrays.fill(dis, Integer.MAX_VALUE);
            Arrays.fill(parent, -1);

            // Find the shortest path
            shortestPath(n, source);

            // If we cannot find any more path to target node
            if (dis[target] == Integer.MAX_VALUE) {
                break;
            }

            // Find the max flow on that path
            int f = k - flow;
            int curr = target;
            while (curr != source) {
                // Find the min capacity
                f = Math.min(f, capacity[parent[curr]][curr]);
                curr = parent[curr];
            }

            // Apply flow
            flow += f;
            cost += f * dis[target];
            curr = target;

            while (curr != source) {
                capacity[parent[curr]][curr] -= f;
                capacity[curr][parent[curr]] += f;
                curr = parent[curr];
            }
        }

        if (k == Integer.MAX_VALUE || flow < k) {
            return cost;
        }
        return -1;
    }

    void shortestPath(int n, int source) {
        dis[source] = 0;
        ArrayDeque<Integer> queue = new ArrayDeque<>();
        queue.add(source);
        boolean[] inQueue = new boolean[n];
        inQueue[source] = true;

        while (!queue.isEmpty()) {
            int u = queue.poll();
            inQueue[u] = false;
            for (int v : adj[u]) {
                if (capacity[u][v] > 0 && dis[v] > dis[u] + cost[u][v]) {
                    dis[v] = dis[u] + cost[u][v];
                    parent[v] = u;
                    if (!inQueue[v]) {
                        inQueue[v] = true;
                        queue.add(v);
                    }
                }
            }
        }
    }

    void addEdge(int from, int to, int capacity, int cost) {
        adj[from].add(to);
        adj[to].add(from);
        this.cost[from][to] = cost;
        this.cost[to][from] = -cost;
        this.capacity[from][to] = capacity;
    }

    void reset() {
        adj = new ArrayDeque[n];
        Arrays.setAll(adj, o -> new ArrayDeque<>());
        cost = new int[n][n];
        capacity = new int[n][n];
    }

}
