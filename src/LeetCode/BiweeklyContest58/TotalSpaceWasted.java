package LeetCode.BiweeklyContest58;

import java.util.*;

public class TotalSpaceWasted {

    public static void main(String[] args) {
        TotalSpaceWasted o = new TotalSpaceWasted();
      //System.out.println(o.minSpaceWastedKResizing(new int[] { 881335,490095,964210,133828,652484,560070,28277,950984,413161,620645,591808,695206,28419,88026,673972,449434,142292,908960,484126,190557,52728,272794,397520,343255,221942,476787,342723,353895,798208,922370,397543,291774,788540,997410,872336,442043,264526,875468,85885,493153,20325,785409,565622,54616,998161,366961,235114,681726,71952,819183,683415,42214,790871,32538,995741,259296,209045,879996,21370,651518,159785,250133,132353,496565,701979,119947,591365,993796,228553,487624,733443,268691,804151,386815,175940,635325,636746,784257,753253,120097,815574,859100,171721,326148,113350,606795,26926,974009,327111,603767,710251,952135,393538,415923,987204,749748,207964,79689,620860,724162,870918,657712,254647,106852,731060,810005,316233,891598,717498,629578,844658,126936,834905,593424,820653,43065,364070,558624,449187,693656,388572,72307,530539,678999,357807,13267,890845,440464,862277,514014,110666,454583,379782,666460,934885,868963,482072,741667,160423,456642,184693,769441,547092,682055,283202,645831,847459,964290,564316,812271,506984,487456,456733,865846,766537,621255,281434,337961,893086,257421,871085,980023,90873,292478,924458,472701,255710,786932,487283,597531,639980,700647,397400,352738,30095,518318,892289,340803,190673,511234,222424,372061,836588,270903,356872,293244,923083,625114,735245,922860,289689,582790 }, 42));
        System.out.println(o.minSpaceWastedKResizing(new int[]{10, 20, 15, 30, 20}, 0));
    }

    int[][] dp;
    int dMax = (int) 1e6 * 100;

    public int minSpaceWastedKResizing(int[] nums, int k) {
        int len = nums.length;
        dp = new int[len][k + 1];
        for (int[] d : dp)
            Arrays.fill(d, -1);
        return find(nums, 0, k);
    }

    int find(int[] nums, int index, int k) {
        if (index == nums.length)
            return 0;
        if (k == -1)
            return dMax;
        if (dp[index][k] != -1)
            return dp[index][k];

        int ans = dMax;
        int sum = 0;
        int max = nums[index];
        // Try from index --- every position up to n
        for (int i = index; i < nums.length; i++) {
            max = Math.max(max, nums[i]);
            sum += nums[i];
            int waste = (max) * (i - index + 1) - sum;
            ans = Math.min(ans, find(nums, i + 1, k - 1) + waste);
        }
        return dp[index][k] = ans;
    }
}
