package LeetCode;

import java.util.*;

public class LastDayWhereYouCanStillCross {

    public static void main(String[] args) {

        LastDayWhereYouCanStillCross o = new LastDayWhereYouCanStillCross();
        System.out.println(o.latestDayToCross(177, 5, new int[][]{ {1,1},{104,2},{126,4},{46,2},{169,3},{169,2},{131,5},{69,4},{95,4},{83,5},{53,2},{118,1},{60,5},{32,3},{168,3},{148,5},{6,5},{69,5},{113,4},{34,1},{63,1},{75,4},{58,5},{129,2},{20,1},{17,4},{97,1},{20,2},{136,1},{12,2},{37,5},{62,5},{55,1},{116,5},{114,4},{2,1},{83,3},{151,1},{72,3},{163,4},{82,4},{141,2},{100,4},{108,1},{141,4},{157,4},{30,2},{95,1},{144,1},{61,1},{68,1},{35,5},{22,3},{5,3},{85,3},{175,2},{153,2},{35,2},{129,5},{111,5},{61,2},{155,4},{137,3},{139,5},{18,3},{161,3},{38,4},{86,3},{174,5},{147,2},{154,3},{67,3},{168,5},{38,3},{152,4},{89,4},{111,2},{1,5},{111,1},{62,2},{29,2},{30,3},{138,4},{113,1},{71,2},{90,4},{121,5},{27,5},{45,1},{116,1},{42,4},{125,4},{54,4},{52,2},{26,1},{57,4},{37,3},{115,3},{57,3},{90,1},{18,2},{62,3},{31,5},{56,3},{145,4},{22,5},{87,3},{7,4},{16,1},{153,4},{119,3},{107,4},{144,2},{125,3},{115,2},{116,2},{77,3},{122,3},{52,1},{175,1},{40,5},{128,1},{81,1},{66,3},{115,4},{138,3},{31,2},{165,5},{80,1},{119,4},{103,4},{105,2},{102,1},{146,4},{9,3},{145,3},{1,3},{53,4},{19,1},{76,2},{22,4},{74,3},{58,3},{98,4},{105,3},{144,5},{88,2},{39,4},{29,3},{81,5},{80,2},{137,2},{61,4},{85,1},{117,1},{171,4},{173,4},{43,4},{48,1},{138,2},{134,5},{152,1},{94,4},{138,5},{7,5},{56,1},{142,5},{174,3},{124,3},{137,5},{30,1},{18,4},{98,1},{175,3},{166,4},{28,1},{25,4},{10,2},{112,2},{42,5},{71,5},{134,1},{107,3},{33,5},{172,2},{69,1},{115,1},{166,1},{6,3},{144,3},{139,4},{47,4},{79,5},{11,5},{64,1},{162,2},{1,4},{139,3},{131,4},{106,3},{24,5},{160,4},{135,5},{105,1},{64,4},{36,4},{142,3},{76,1},{120,4},{160,3},{172,4},{3,3},{160,2},{124,4},{1,2},{145,2},{81,2},{163,5},{36,2},{73,3},{121,4},{106,5},{91,4},{85,2},{73,1},{143,1},{129,1},{169,1},{46,1},{5,5},{39,2},{4,5},{130,3},{155,2},{30,4},{71,1},{125,2},{26,3},{163,3},{154,1},{132,5},{83,1},{173,2},{162,5},{16,3},{20,5},{114,5},{9,5},{70,4},{74,1},{169,5},{67,1},{110,2},{4,4},{82,5},{145,5},{50,2},{164,1},{155,5},{40,2},{21,4},{149,4},{103,1},{69,2},{62,4},{100,2},{81,3},{15,3},{156,2},{55,3},{15,5},{149,1},{69,3},{104,3},{85,4},{58,2},{32,4},{170,3},{25,5},{65,1},{124,5},{104,4},{112,3},{173,3},{106,1},{121,1},{59,1},{84,3},{87,4},{176,2},{66,5},{14,2},{155,3},{119,2},{177,4},{163,1},{32,5},{146,2},{57,5},{12,1},{12,3},{20,3},{55,2},{147,3},{164,2},{66,1},{73,5},{63,4},{17,5},{41,5},{65,5},{13,4},{48,4},{143,4},{44,3},{86,5},{23,1},{4,1},{170,4},{70,3},{105,4},{87,2},{15,2},{168,2},{52,5},{43,2},{45,3},{89,1},{94,3},{7,1},{99,2},{6,1},{8,1},{151,5},{31,4},{134,4},{171,2},{91,3},{130,4},{51,5},{95,2},{150,2},{6,4},{78,3},{150,3},{101,2},{28,2},{107,1},{14,1},{167,3},{10,3},{50,1},{100,1},{155,1},{91,1},{140,1},{18,5},{32,2},{97,4},{34,2},{90,5},{127,5},{71,4},{77,5},{117,5},{96,3},{170,5},{50,5},{100,5},{59,2},{52,4},{13,1},{102,2},{46,5},{176,3},{174,2},{61,3},{173,1},{85,5},{161,2},{34,5},{65,4},{53,1},{150,4},{27,1},{114,3},{93,2},{68,3},{102,5},{91,5},{177,2},{54,5},{31,3},{56,2},{109,3},{139,1},{165,4},{108,2},{86,1},{49,3},{62,1},{175,5},{132,3},{43,3},{68,2},{156,5},{41,2},{164,5},{106,2},{4,3},{42,2},{109,2},{31,1},{25,3},{157,1},{146,1},{45,4},{64,2},{2,2},{153,5},{6,2},{39,3},{161,1},{93,3},{36,5},{87,5},{107,2},{94,1},{48,5},{130,2},{117,4},{26,4},{111,3},{158,1},{78,1},{133,4},{133,5},{114,2},{37,1},{130,1},{136,5},{157,3},{117,3},{120,3},{58,1},{21,1},{8,2},{113,5},{80,3},{23,4},{37,4},{112,1},{5,4},{124,2},{123,2},{148,1},{143,5},{49,4},{176,1},{176,5},{108,5},{9,4},{110,3},{128,5},{18,1},{4,2},{165,2},{114,1},{103,3},{95,3},{135,4},{137,1},{96,1},{82,1},{74,4},{88,5},{154,5},{123,3},{147,1},{15,1},{165,1},{152,2},{33,1},{148,2},{47,3},{171,5},{21,2},{92,4},{38,2},{147,4},{157,2},{135,2},{109,5},{21,3},{172,3},{109,4},{113,3},{101,3},{131,1},{167,5},{154,4},{108,4},{28,5},{99,1},{60,1},{110,1},{35,1},{89,3},{140,5},{10,4},{156,3},{166,5},{99,4},{59,5},{65,2},{167,1},{126,3},{19,2},{68,4},{135,1},{172,5},{118,5},{17,2},{59,4},{127,2},{40,1},{158,3},{77,1},{88,4},{75,3},{159,4},{136,2},{49,5},{25,1},{79,3},{79,1},{169,4},{157,5},{3,1},{136,4},{60,4},{67,4},{19,4},{121,2},{104,5},{101,5},{24,2},{3,5},{141,3},{47,2},{54,2},{74,5},{35,3},{51,3},{67,5},{8,5},{36,3},{58,4},{142,4},{101,1},{147,5},{150,1},{65,3},{171,1},{14,5},{109,1},{151,4},{90,3},{26,5},{140,4},{78,2},{14,3},{133,3},{2,3},{132,4},{23,3},{118,4},{82,3},{153,1},{9,2},{131,3},{13,5},{76,3},{106,4},{55,5},{142,2},{51,4},{126,2},{83,4},{159,2},{27,4},{128,4},{156,1},{89,2},{123,1},{13,3},{79,4},{8,3},{141,5},{163,2},{76,4},{151,3},{143,2},{70,5},{12,4},{77,4},{164,4},{11,3},{73,4},{97,2},{160,1},{63,2},{148,3},{22,1},{141,1},{64,3},{149,5},{29,4},{97,3},{51,2},{118,3},{5,1},{93,1},{156,4},{102,3},{84,2},{166,2},{25,2},{172,1},{33,3},{137,4},{22,2},{122,4},{55,4},{24,1},{32,1},{60,2},{27,3},{15,4},{177,1},{116,4},{30,5},{17,1},{50,3},{13,2},{39,1},{11,1},{103,5},{120,1},{125,5},{7,3},{70,2},{86,2},{134,2},{84,4},{61,5},{101,4},{166,3},{127,4},{92,5},{167,2},{132,1},{29,5},{177,5},{70,1},{151,2},{149,2},{95,5},{153,3},{176,4},{158,5},{159,3},{57,2},{87,1},{43,1},{126,1},{53,5},{59,3},{159,5},{11,2},{2,5},{123,4},{42,1},{154,2},{41,3},{143,3},{152,3},{122,2},{16,5},{164,3},{27,2},{94,5},{117,2},{127,3},{98,2},{145,1},{162,4},{173,5},{130,5},{16,4},{118,2},{170,2},{150,5},{174,4},{102,4},{75,1},{146,5},{53,3},{34,4},{91,2},{110,5},{41,4},{44,2},{134,3},{128,3},{78,5},{112,5},{124,1},{88,3},{131,2},{88,1},{77,2},{129,4},{123,5},{170,1},{99,5},{24,4},{168,1},{98,3},{3,4},{49,1},{78,4},{26,2},{71,3},{33,2},{84,5},{89,5},{149,3},{84,1},{23,5},{126,5},{47,5},{161,5},{37,2},{90,2},{38,5},{8,4},{19,3},{113,2},{108,3},{132,2},{54,1},{75,2},{120,2},{162,1},{119,1},{28,3},{40,3},{41,1},{96,2},{125,1},{19,5},{36,1},{80,5},{68,5},{39,5},{86,4},{57,1},{115,5},{142,1},{133,2},{174,1},{100,3},{104,1},{66,4},{99,3},{16,2},{135,3},{56,4},{33,4},{103,2},{105,5},{60,3},{72,4},{44,5},{44,4},{97,5},{63,5},{45,5},{162,3},{83,2},{144,4},{46,4},{12,5},{11,4},{148,4},{23,2},{48,3},{79,2},{10,1},{168,4},{158,4},{140,3},{92,3},{43,5},{127,1},{29,1},{34,3},{17,3},{110,4},{24,3},{10,5},{152,5},{42,3},{76,5},{128,2},{5,2},{92,2},{167,4},{120,5},{146,3},{72,5},{175,4},{122,1},{140,2},{40,4},{96,5},{56,5},{122,5},{20,4},{119,5},{98,5},{64,5},{28,4},{92,1},{116,3},{7,2},{47,1},{35,4},{161,4},{121,3},{177,3},{93,5},{80,4},{3,2},{49,2},{75,5},{136,3},{96,4},{67,2},{165,3},{45,2},{9,1},{112,4},{138,1},{54,3},{48,2},{133,1},{82,2},{171,3},{111,4},{74,2},{139,2},{2,4},{107,5},{50,4},{94,2},{93,4},{38,1},{73,2},{72,2},{129,3},{52,3},{51,1},{46,3},{160,5},{21,5},{159,1},{81,4},{14,4},{44,1},{72,1},{158,2},{66,2},{63,3}}));
    }

    public int latestDayToCross(int row, int col, int[][] cells) {

        int[][] temp = new int[row][col];
        int days = 1;
        for (int[] cell : cells) {
            temp[cell[0] - 1][cell[1] - 1] = days++;
        }
        int start = 0, end = row * col;
        while (start < end) {
            int mid = (end + start + 1) / 2;
            if (isPoss(mid, temp)) {
                start = mid;
            } else {
                end = mid - 1;
            }
        }
        return start;
    }

    int[][] direc = new int[][]{{1, 0}, {0, 1}, {-1, 0}, {0, -1}};

    boolean isPoss(int day, int[][] cells) {
        if(day == 0) return true;
        int row = cells.length, col = cells[0].length;
        boolean[][] vis = new boolean[row][col];

        Queue<int[]> queue = new ArrayDeque<>();
        for (int i = 0; i < col; i++) {
            if (cells[0][i] > day) {
                vis[0][i] = true;
                queue.add(new int[]{0, i});
            }
        }

        while (!queue.isEmpty()) {
            int[] curr = queue.poll();
            for (int[] dir : direc) {
                int modx = dir[0] + curr[0], mody = dir[1] + curr[1];
                if (isValid(modx, mody, row, col) && cells[modx][mody] > day && !vis[modx][mody]) {
                    vis[modx][mody] = true;
                    if (modx == row - 1)
                        return true;
                    queue.add(new int[]{modx, mody});
                }
            }
        }
        return false;
    }

    boolean isValid(int x, int y, int row, int col) {
        return x >= 0 && y >= 0 && x < row && y < col;
    }
}
