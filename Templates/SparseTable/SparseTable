 class SparseTable {
        private int[][] sparse;
        int len;
        private int[][] input;

        public SparseTable(int[][] arr) {
            input = arr;
            len = input.length;
            n = arr.length;
            preProcess();
        }

        private void preProcess() {
            sparse = new int[len][log2(len) + 1];
            for (int i = 0; i < len; i++) {
                sparse[i][0] = i;
            }

            for (int j = 1; (1 << j) <= len; j++) {
                for (int i = 0; i + (1 << j) - 1 < n; i++) {
                    if (input[sparse[i][j - 1]][0] < input[sparse[i + (1 << (j - 1))][j - 1]][0]) {
                        sparse[i][j] = sparse[i][j - 1];
                    } else {
                        sparse[i][j] = sparse[i + (1 << (j - 1))][j - 1];
                    }
                }
            }
        }

        public int rangeMinQuery(int low, int high) {
            if (high < low) {
                high = high ^ low ^ (low = high);
            }
            int l = high - low + 1;
            int k = log2(l);
            if (input[sparse[low][k]][0] < input[sparse[high - (1 << k) + 1][k]][0]) {
                return input[sparse[low][k]][1];
            }
            return input[sparse[high - (1 << k) + 1][k]][1];
        }

        private int log2(int len) {
            return 31 - Integer.numberOfLeadingZeros(len);
        }
    }