
public class SegmentTree {

	int[] arr;
	int[] nodes;
	int n;

	public SegmentTree(int[] nodes){
		arr = new int[( getSize(nodes.length) * 2 + 1)];
		n = nodes.length;
		this.nodes = nodes;
		construct(0, n - 1, 0);
	}

	void construct(int l, int h, int pos ){
    	if( l == h ){
   			arr[pos] = nodes[l];
    	}else{
   			int mid = l + (h - l)/2;
   			int p = pos << 1;
   			construct(l, mid, p + 1);
   			construct(mid + 1, h, p + 2);
    		arr[pos] = Math.max( arr[p + 1], arr[p + 2]);
        }
    }

	void update(int node, int value ){
		update(0, n - 1, 0, node, value);
	}
	
	private void update(int l, int h, int pos, int node, int value ){
		if( l == h ){
			arr[pos] = value;
		}else{
			int mid = l + (h - l)/2;
			int p = pos << 1;
			if( node <= mid ){
				update(l, mid, p + 1, node, value );
			}else{
				update(mid + 1, h, p + 2, node, value);
			}
			
			arr[pos] = Math.max( arr[p + 1], arr[p + 2]);
		}
		
	}
	
	long query(int sumOfDigitsInBaseK, int b ){
		return query(0, n - 1, 0, sumOfDigitsInBaseK, b);
	}
	
	private int query(int l, int h, int pos, int sumOfDigitsInBaseK, int b ){
		if( l > b || h < sumOfDigitsInBaseK ) return Integer.MIN_VALUE;
		
		if( l >= sumOfDigitsInBaseK && h <= b ){
			return arr[pos];
		}else{
			int mid = l + (h - l)/2;
			int p = pos << 1;
			return Math.max( query(l, mid, p + 1, sumOfDigitsInBaseK, b ), query(mid + 1, h, p + 2, sumOfDigitsInBaseK, b) );
		}
	}

	
	int getSize(int len ){
		if( len < 2 ) return 1;
		
		if( (len & (len - 1)) == 0 ) return len;
		
		while( ( len & (len - 1) ) != 0 ){
			len = len & (len - 1);
		}
		
		return len << 1;
	}
}
