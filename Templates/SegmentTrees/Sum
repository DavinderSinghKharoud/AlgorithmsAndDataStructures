
 class SegmentTree {

    int[] arr;
    int[] nodes;
    int n;

    public SegmentTree(int[] nodes) {
        arr = new int[(getSize(nodes.length) * 2 + 1)];
        n = nodes.length;
        this.nodes = nodes;
        construct(0, n - 1, 0);
    }

    void update(int node, int value) {
        update(0, n - 1, 0, node, value);
    }

    private void update(int l, int h, int pos, int node, int value) {
        if (l == h) {
            arr[pos] = value;
        } else {
            int mid = l + (h - l) / 2;
            int p = pos << 1;
            if (node <= mid) {
                update(l, mid, p + 1, node, value);
            } else {
                update(mid + 1, h, p + 2, node, value);
            }

            arr[pos] = arr[p + 1] + arr[p + 2];
        }

    }

    long query(int sumOfDigitsInBaseK, int b) {
        return query(0, n - 1, 0, sumOfDigitsInBaseK, b);
    }

    private long query(int start, int end, int pos, int left, int right) {
        if (start > right || end < left)
            return 0;

         if (start >= left && end <= right) {
            return arr[pos];
         } else {
            int mid = start + (end - start) / 2;
            int p = pos << 1;
            return query(start, mid, p + 1, left, right) + query(mid + 1, end, p + 2, left, right);
         }
      }


    void construct(int l, int h, int pos) {
        if (l == h) {
            arr[pos] = nodes[l];
        } else {
            int mid = l + (h - l) / 2;
            int p = pos << 1;
            construct(l, mid, p + 1);
            construct(mid + 1, h, p + 2);

            arr[pos] = arr[p + 1] + arr[p + 2];
        }
    }


    int getSize(int len) {
        if (len < 2) return 1;

        if ((len & (len - 1)) == 0) return len;

        while ((len & (len - 1)) != 0) {
            len = len & (len - 1);
        }

        return len << 1;
    }
}
